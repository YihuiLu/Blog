<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN"><id>/Blog/</id><title>一灰的随手记</title><updated>2021-08-10T06:27:37.830848+08:06</updated><author><name>一灰</name><email>isRichard.Lu@gmail.com</email></author><link href="/Blog/" rel="alternate"/><generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator><logo>https://cdn.jsdelivr.net/gh/YihuiLu/Blog@gh-pages/logo.png</logo><subtitle>日常生活即是颂歌</subtitle><entry><id>/Blog/archives/SpeechRecognition/</id><title>MacOS 下 Pycharm运行SpeechRecognition无法录音</title><updated>2021-08-10T06:27:37.831224+00:00</updated><author><name>一灰</name><email>isRichard.Lu@gmail.com</email><uri>https://github.com/YihuiLu</uri></author><content>&lt;p&gt;关联同样环境下的其他库和服务&lt;/p&gt;&lt;p&gt;比如：摄像头&lt;/p&gt;&lt;p&gt;因为涉及到调用硬件，MacOS会请求用户授权，由于2020.3以前的Pycharm并不兼容授权功能，导致代码运行不正常&lt;/p&gt;&lt;p&gt;解决方式：&lt;/p&gt;&lt;p&gt;建议直接在终端运行代码吧，&lt;/p&gt;&lt;p&gt;或者升级Pycharm到最新&lt;/p&gt;&lt;p&gt;也可以通过其他方法让Pycharm得到授权，但太麻烦了，得不偿失&lt;/p&gt;</content><link href="/Blog/archives/SpeechRecognition/" rel="alternate"/><published>2020-07-17T11:05:00+08:06</published></entry><entry><id>/Blog/archives/Flask/</id><title>如何快速使用Flask框架开发一个企业级Restful API服务？</title><updated>2021-08-10T06:27:37.831195+00:00</updated><author><name>一灰</name><email>isRichard.Lu@gmail.com</email><uri>https://github.com/YihuiLu</uri></author><content/><link href="/Blog/archives/Flask/" rel="alternate"/><published>2020-08-17T13:34:00+08:06</published></entry><entry><id>/Blog/archives/Celery/</id><title>Flask + Celery 实现分布式异步处理</title><updated>2021-08-10T06:27:37.831165+00:00</updated><author><name>一灰</name><email>isRichard.Lu@gmail.com</email><uri>https://github.com/YihuiLu</uri></author><content>&lt;p&gt;修改一下试试修改邮箱效果&lt;/p&gt;</content><link href="/Blog/archives/Celery/" rel="alternate"/><published>2020-09-01T13:34:00+08:06</published></entry><entry><id>/Blog/archives/java/</id><title>Linux 下安装Java 14（适用大多数Linux发行版）</title><updated>2021-08-10T06:27:37.831136+00:00</updated><author><name>一灰</name><email>isRichard.Lu@gmail.com</email><uri>https://github.com/YihuiLu</uri></author><content>&lt;h3&gt;1. 在/usr/下创建java目录&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;root@9314e39c1d8c: mkdir/usr/java
root@9314e39c1d8c: cd /usr/java
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;2. 下载Java压缩文件并解压&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;root@9314e39c1d8c: curl -O curl -O https://download.oracle.com/otn-pub/java/jdk/14.0.2+12/205943a0976c4ed48cb16f1043c5c647/jdk-14.0.2_linux-x64_bin.tar.gz?AuthParam=1599111678_3050bd9ff5d540cc544a0567b2d3e31f
root@9314e39c1d8c: tar -zxvf jdk-14.0.2_linux-x64_bin.tar.gz\?AuthParam\=1599111678_3050bd9ff5d540cc544a0567b2d3e31f
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;也可以来这里下载自己需要的版本：
&lt;a href="https://www.oracle.com/cn/java/technologies/javase-downloads.html"&gt;&lt;a href="https://www.oracle.com/cn/java/technologies/javase-downloads.html"&gt;https://www.oracle.com/cn/java/technologies/javase-downloads.html&lt;/a&gt;&lt;/a&gt;
下载完以后自行调整安装指令&lt;/p&gt;&lt;h3&gt;3. 设置环境变量&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;root@9314e39c1d8c: vi /etc/profile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在文件最后添加如下内容&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;JAVA_HOME=/usr/java/jdk-14.0.2
JRE_HOME=/usr/java/jdk-14.0.2/jre
CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib
PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin
export JAVA_HOME JRE_HOME CLASS_PATH PATH
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;4. 更新配置&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;root@9314e39c1d8c: source /etc/profile&lt;/code&gt;&lt;/p&gt;&lt;h3&gt;5. 验证&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;root@9314e39c1d8c:/usr/java# java --version
java 14.0.2 2020-07-14
Java(TM) SE Runtime Environment (build 14.0.2+12-46)
Java HotSpot(TM) 64-Bit Server VM (build 14.0.2+12-46, mixed mode, sharing)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;大功告成&lt;/h1&gt;
</content><link href="/Blog/archives/java/" rel="alternate"/><published>2020-09-03T13:34:00+08:06</published></entry><entry><id>/Blog/archives/Python/</id><title>Python 包管理工具合集</title><updated>2021-08-10T06:27:37.831108+00:00</updated><author><name>一灰</name><email>isRichard.Lu@gmail.com</email><uri>https://github.com/YihuiLu</uri></author><content/><link href="/Blog/archives/Python/" rel="alternate"/><published>2020-09-04T11:14:00+08:06</published></entry><entry><id>/Blog/archives/sqlalchemy_db/</id><title>sqlalchemy 绑定多个数据库</title><updated>2021-08-10T06:27:37.831079+00:00</updated><author><name>一灰</name><email>isRichard.Lu@gmail.com</email><uri>https://github.com/YihuiLu</uri></author><content>&lt;p&gt;#绑定多个数据库
从 0.12 开始，Flask-SQLAlchemy 可以容易地连接到多个数据库。为了实现这个功能，预配置了 SQLAlchemy 来支持多个 “binds”。&lt;/p&gt;&lt;p&gt;什么是绑定(binds)? 在 SQLAlchemy 中一个绑定(bind)是能执行 SQL 语句并且通常是一个连接或者引擎类的东东。在 Flask-SQLAlchemy 中，绑定(bind)总是背后自动为您创建好的引擎。这些引擎中的每个之后都会关联一个短键（bind key）。这个键会在模型声明时使用来把一个模型关联到一个特定引擎。&lt;/p&gt;&lt;p&gt;如果模型没有关联一个特定的引擎的话，就会使用默认的连接(SQLALCHEMY_DATABASE_URI 配置值)。&lt;/p&gt;&lt;p&gt;##示例配置
下面的配置声明了三个数据库连接。特殊的默认值和另外两个分别名为 users&lt;code&gt;（用于用户）和&lt;/code&gt;appmeta 连接到一个提供只读访问应用内部数据的 sqlite 数据库）:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;SQLALCHEMY_DATABASE_URI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;postgres://localhost/main&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;SQLALCHEMY_BINDS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;users&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="s1"&gt;&amp;#39;mysqldb://localhost/users&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;appmeta&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="s1"&gt;&amp;#39;sqlite:////path/to/appmeta.db&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;##创建和删除表
create_all() 和 drop_all() 方法默认作用于所有声明的绑定(bind)，包括默认的。这个行为可以通过提供 bind 参数来定制。它可以是单个绑定(bind)名, '&lt;strong&gt;all&lt;/strong&gt;' 指向所有绑定(binds)或一个绑定(bind)名的列表。默认的绑定(bind)(SQLALCHEMY_DATABASE_URI) 名为 None:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; db.create_all()
&amp;gt;&amp;gt;&amp;gt; db.create_all(bind=['users'])
&amp;gt;&amp;gt;&amp;gt; db.create_all(bind='appmeta')
&amp;gt;&amp;gt;&amp;gt; db.drop_all(bind=None)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;##引用绑定(Binds)
当您声明模型时，您可以用 &lt;strong&gt;bind_key&lt;/strong&gt; 属性指定绑定(bind):&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;__bind_key__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;users&amp;#39;&lt;/span&gt;
    &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;bind key 存储在表中的 info 字典中作为 'bind_key' 键值。了解这个很重要，因为当您想要直接创建一个表对象时，您会需要把它放在那:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;user_favorites&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user_favorites&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user.id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;message_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;message.id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bind_key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;users&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果您在模型上指定了 &lt;strong&gt;bind_key&lt;/strong&gt; ，您可以用它们准确地做您想要的。模型会自行连 接到指定的数据库连接。&lt;/p&gt;</content><link href="/Blog/archives/sqlalchemy_db/" rel="alternate"/><published>2020-09-07T10:18:00+08:06</published></entry><entry><id>/Blog/archives/Celery_jpype/</id><title>Celery+jpype 卡死，Celery+Java 卡死，Celery Task 卡死</title><updated>2021-08-10T06:27:37.831048+00:00</updated><author><name>一灰</name><email>isRichard.Lu@gmail.com</email><uri>https://github.com/YihuiLu</uri></author><content>&lt;p&gt;最近在写一个项目的时候同时使用到了&lt;code&gt;Celery&lt;/code&gt;和&lt;code&gt;jpype&lt;/code&gt;&lt;/p&gt;&lt;p&gt;但是在实际使用过程中出现了Celery Task进程卡死的情况&lt;/p&gt;&lt;p&gt;解决思路如下：&lt;/p&gt;&lt;p&gt;首先是观察到涉及到使用&lt;code&gt;jpype&lt;/code&gt;的代码在本地运行没有问题，代码片段如下：&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;jpype&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_trie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;maps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;java.util.TreeMap&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)()&lt;/span&gt;  &lt;span class="c1"&gt;# 创建 TreeMap 空间&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;maps&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;
    &lt;span class="n"&gt;rs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;com.hankcs.hanlp.collection.trie.DoubleArrayTrie&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;maps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;rs&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;经过排错后发现代码停止在以下位置：&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;rs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;com.hankcs.hanlp.collection.trie.DoubleArrayTrie&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;maps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这段代码调用了Java相关的包，于是Google到了以下内容
&lt;a href="https://github.com/jpype-project/jpype/issues/358"&gt;&lt;a href="https://github.com/jpype-project/jpype/issues/358"&gt;https://github.com/jpype-project/jpype/issues/358&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;在这个issues中提到了：&lt;/p&gt;&lt;blockquote&gt;
&lt;p&gt;Wow that is failing in a very strange spot. When you said failed in a thread I figured it would be in the proxy code, but this is a fail on getting environment variables on startup. Are you sure that you don't have more than one JVM started? Your module doesn't do a check for isJVMStarted, but I thought that we have explicit checks to prevent a fail there so that seems unlikely. The trace also does not show a second call.
My next best guess is this is a security violation. I don't know much about celery, but it may be possible that it is trying to start the JVM from within some type of sand box. My approach would be to instrument the call to JPEnv::CreateJavaVM to record all the inputs that are being passed to JVM and see if I was sure that nothing bad got sent to the JVM call. As you can see in the trace, we haven't even made contact with the JVM, so assuming we are providing it with valid inputs the bug is likely in the JVM and not within JPype.
The last option here though it seems unlikely is the shared memory loader for the jvm has somehow failed. The only thing that we do with the JVM before this point is loading the shared library into memory. On architectures with mixed executable files (32/64) this can often go wrong leading to a bad entry point. But as you ran to the Parse locale it seems unlikely.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;

&lt;pre&gt;&lt;code&gt;C  [libjava.dylib+0xd2a7]  getMacOSXLocale+0x123
C  [libjava.dylib+0xd353]  setupMacOSXLocale+0x12
C  [libjava.dylib+0xd765]  ParseLocale+0x2e
C  [libjava.dylib+0xd4ef]  GetJavaProperties+0x183
C  [libjava.dylib+0x5cbb]  Java_java_lang_System_initProperties+0x30
j  java.lang.System.initProperties(Ljava/util/Properties;)Ljava/util/Properties;+0
j  java.lang.System.initializeSystemClass()V+13
v  ~StubRoutines::call_stub
V  [libjvm.dylib+0x2f0b3a]
V  [libjvm.dylib+0x2f0d35]
V  [libjvm.dylib+0x2f0ead]
V  [libjvm.dylib+0x57313b]
V  [libjvm.dylib+0x3271b2]
C  [_jpype.cpython-36m-darwin.so+0x242cb]  _ZN5JPEnv12CreateJavaVMEPv+0x3b
The specific failure point is

 // Get the entry points in the shared library
 loadEntryPoints(vmPath);  &amp;lt;== Could load invalid pointers

 JavaVMInitArgs jniArgs;
 jniArgs.options = NULL;

 // prepare this ...
 jniArgs.version = USE_JNI_VERSION;
 jniArgs.ignoreUnrecognized = ignoreUnrecognized;

 jniArgs.nOptions = (jint)args.size();
 jniArgs.options = (JavaVMOption*)malloc(sizeof(JavaVMOption)*jniArgs.nOptions);
 memset(jniArgs.options, 0, sizeof(JavaVMOption)*jniArgs.nOptions);
 for (int i = 0; i &amp;lt; jniArgs.nOptions; i++)
 {
   jniArgs.options[i].optionString = (char*)args[i].c_str();  &amp;lt;== All options should be valid
 }
 JPEnv::CreateJavaVM((void*)&amp;amp;jniArgs);  &amp;lt;== Everything in the structure should be valid at this point
 free(jniArgs.options);
The only trace I could find that was similar is

https://bugs.openjdk.java.net/secure/attachment/72587/hs_err_pid55488.log
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;再加上这个issues中的其他信息，猜测是在&lt;code&gt;celery&lt;/code&gt;的&lt;code&gt;worker&lt;/code&gt;中因为某种环境的影响导致&lt;code&gt;Java&lt;/code&gt;无法正常运行，并与&lt;code&gt;JVM&lt;/code&gt;有关&lt;/p&gt;&lt;p&gt;并且最后他们提到&lt;/p&gt;&lt;blockquote&gt;
&lt;p&gt;Starting after the fork is by far the safest approach.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;然后这个问题还关闭了，这就郁闷了，但请教同事建议我看了这个：
&lt;a href="https://stackoverflow.com/questions/12003221/celery-task-schedule-ensuring-a-task-is-only-executed-one-at-a-time"&gt;&lt;a href="https://stackoverflow.com/questions/12003221/celery-task-schedule-ensuring-a-task-is-only-executed-one-at-a-time"&gt;https://stackoverflow.com/questions/12003221/celery-task-schedule-ensuring-a-task-is-only-executed-one-at-a-time&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;最后找到了：&lt;a href="https://docs.celeryproject.org/en/stable/reference/celery.bin.worker.html#cmdoption-celery-worker-p"&gt;&lt;a href="https://docs.celeryproject.org/en/stable/reference/celery.bin.worker.html#cmdoption-celery-worker-p"&gt;https://docs.celeryproject.org/en/stable/reference/celery.bin.worker.html#cmdoption-celery-worker-p&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;猜测跟worker运行时的线程约束有关，于是乎测试：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-P, --pool
Pool implementation:

prefork (default), eventlet, gevent, threads or solo.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;##然后就顺利的成功了&lt;/p&gt;&lt;p&gt;最后的worker启动命令如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;celery -A celery_app.worker:celery worker -c 4 -l info -P solo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;重点在于&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-P solo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个命令指定了每个worker只能用单线程模式执行，这样就不会导致JVM出现不可预知的问题&lt;/p&gt;&lt;p&gt;经过测试在指定 &lt;code&gt;-P solo&lt;/code&gt; 的同时可以指定 &lt;code&gt;-c&lt;/code&gt;&lt;/p&gt;&lt;p&gt;仓促记录，日后修改&lt;/p&gt;</content><link href="/Blog/archives/Celery_jpype/" rel="alternate"/><published>2020-09-08T16:58:00+08:06</published></entry><entry><id>/Blog/archives/Go_1/</id><title>Go语言入门心得</title><updated>2021-08-10T06:27:37.831014+00:00</updated><author><name>一灰</name><email>isRichard.Lu@gmail.com</email><uri>https://github.com/YihuiLu</uri></author><content/><link href="/Blog/archives/Go_1/" rel="alternate"/><published>2020-09-28T16:58:00+08:06</published></entry><entry><id>/Blog/archives/FastAPI%20Redis%20aioredis/</id><title>小记一次FastAPI使用连接池调用Redis时，切换数据库的问题</title><updated>2021-08-10T06:27:37.830971+00:00</updated><author><name>一灰</name><email>isRichard.Lu@gmail.com</email><uri>https://github.com/YihuiLu</uri></author><content>&lt;p&gt;之前因为项目需要，尝试了新兴框架 FastAPI，他的很多特性十分值得称赞，比如自动文档、类型校验、速度、异步等等&lt;/p&gt;&lt;p&gt;但是在使用过程中遇到了切换Redis db的需求，比如验证码、用户登录信息等等的缓存需要通过db隔离，因为FastApi的异步特性，当时选用了aioredis
作为驱动，但是翻了翻文档并没有找到在创建连接池后切换数据库的方法，于是参考了Django框架的实现原理：给每一个db单独创建连接池，在使用时根据需求调用即可&lt;/p&gt;&lt;p&gt;于是编写代码如下：&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RedisPool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;redis_pool_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__await__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_create_pool&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_create_pool&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__await__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_create_pool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;REDIS_DB_LIST&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;redis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;aioredis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_redis_pool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;REDIS_URL&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{db}&lt;/span&gt;&lt;span class="s2"&gt;?encoding=utf-8&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;redis_pool_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;select_db&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;redis_pool_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;调用的Redis数据库未创建连接池&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;close_pool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;redis_pool_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结合框架如下：&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register_redis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;startup&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_redis&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;redis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;RedisPool&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;shutdown&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;close_redis&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close_pool&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;调用方法如下：&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;redis_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_db&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;rs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;redis_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;test_key-&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;12&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;expire&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="c1"&gt;# token过期时间为4小时&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;大概逻辑如下：&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;迭代配置文件声明的，需要使用的db列表&lt;/li&gt;
&lt;li&gt;创建每个db的pool&lt;/li&gt;
&lt;li&gt;使用时找到需要的拿去用即可&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其他：&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;在框架启动时利用FastAPI的@app.on_event(&amp;quot;startup&amp;quot;)初始化连接池&lt;/li&gt;
&lt;li&gt;在框架关闭时close_pool()&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上面值得注意的是，因为aioredis是异步的，所以一处异步处处异步
异步类不常写，所以记录一下&lt;/p&gt;</content><link href="/Blog/archives/FastAPI%20Redis%20aioredis/" rel="alternate"/><published>2021-03-11T17:38:00+08:06</published></entry><entry><id>/Blog/archives/M1%20Mac%20%27has%20no%20attribute%20%27enable_load_extension%27/</id><title>解决 M1 Mac 'has no attribute 'enable_load_extension'.md</title><updated>2021-08-10T06:27:37.830896+00:00</updated><author><name>一灰</name><email>isRichard.Lu@gmail.com</email><uri>https://github.com/YihuiLu</uri></author><content>&lt;p&gt;最近由于项目需要，使用&lt;code&gt;spatialite&lt;/code&gt;插件，但是实际使用时遇到以下错误&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;AttributeError: &lt;span class="s1"&gt;&amp;#39;sqlite3.Connection&amp;#39;&lt;/span&gt; object has no attribute &lt;span class="s1"&gt;&amp;#39;enable_load_extension&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;废了点心思，最终在Python3.9文档中找到如下描述：&lt;/p&gt;&lt;blockquote&gt;
&lt;p&gt;sqlite3 模块的构建默认没有附带可加载扩展支持，因为某些平台（特别是 Mac OS X）上的 SQLite 库在编译时未使用此特性。 要获得可加载扩展支持，你必须传入 --enable-loadable-sqlite-extensions 来进行配置。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;描述比较清晰，主要是因为系统环境，导致编译时未打开&lt;code&gt;enable-loadable-sqlite-extensions&lt;/code&gt;&lt;/p&gt;&lt;p&gt;于是尝试了几个版本的python以后，最终成功编译 &lt;a href="https://www.python.org/ftp/python/3.8.10/Python-3.8.10.tgz"&gt;python3.8.10&lt;/a&gt;&lt;/p&gt;&lt;p&gt;编译流程：&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;下载 &lt;a href="https://www.python.org/ftp/python/3.8.10/Python-3.8.10.tgz"&gt;python3.8.10&lt;/a&gt; 到本地&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;解压到任意目录&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;cd /解压目录

./configure --enable-loadable-sqlite-extensions  
# --enable-loadable-sqlite-extensions是关键

make

make install 

# 可能会出现缺少依赖无法编译的问题，可以根据实际报错处理
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最后经过测试可以完美调用 &lt;code&gt;enable_load_extension&lt;/code&gt; 函数&lt;/p&gt;</content><link href="/Blog/archives/M1%20Mac%20%27has%20no%20attribute%20%27enable_load_extension%27/" rel="alternate"/><published>2021-08-09T19:46:00+08:06</published></entry></feed>